[project]
name = "py-modelrunner"
description = "Python classes for organizing (HPC) simulations"
authors = [
    {name = "David Zwicker", email="david.zwicker@ds.mpg.de"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9,<3.14"
dynamic = ["version"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

# Requirements for setuptools
dependencies = [
    "jinja2>=3",
    "numpy>=1.18.0",
    "tqdm>=4.45",
    "numcodecs>=0.10",
]

[project.optional-dependencies]
all = [
    "h5py>=3.5",
    "pandas>=1.3",
    "PyYAML>=5",
    "zarr>=2,<4",
]
test = [
    "black>=19",
    "isort>=5.1",
    "pytest>=5.4",
    "pytest-cov>=2.8",
    "pytest-xdist>=1.30",
    "py-pde>=0.33",
    "mypy>=0.770",
]

[project.urls]
homepage = "https://github.com/zwicker-group/py-modelrunner"
documentation = "http://py-modelrunner.readthedocs.io"
repository = "https://github.com/zwicker-group/py-modelrunner"

[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true
zip-safe = false  # required for mypy to find the py.typed file

[tool.setuptools.packages.find]
include = ["modelrunner*", "modelrunner/py.typed", "modelrunner/run/templates/*.template"]
exclude = ["*.tests", "*.tests.*", "tests.*", "tests"]
namespaces = false

[tool.setuptools.exclude-package-data]
"*" = ["*.tests", "*.tests.*", "tests.*", "tests"]

[tool.setuptools_scm]
write_to = "modelrunner/_version.py"

[tool.ruff]
target-version = "py39"
exclude = ["scripts/templates"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "UP",  # pyupgrade
    "I",  # isort
    "A",  # flake8-builtins 
    "B",  # flake8-bugbear
    "F",  # pyflakes
    "C4",  # flake8-comprehensions
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = ["B007", "B027", "B028", "F401", "F403", "SIM108", "ISC001", "PT006", "PT011", "RET504", "RET505", "RET506"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "self", "local-folder"]

[tool.ruff.lint.isort.sections]
self = ["modelrunner", "helpers"]

[tool.black]
target_version = ["py39"]

[tool.isort]
profile = "black"
known_self = ["modelrunner", "helpers"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "SELF", "LOCALFOLDER"]

[tool.pytest.ini_options]
addopts = "--strict-markers"
norecursedirs = "tests/helpers"
pythonpath = ["tests/helpers"]
filterwarnings = [
    "ignore:.*Duplicate name.*zarray.*:UserWarning",
    "ignore:.*Duplicate name.*zattrs.*:UserWarning",
    "ignore:.*importing the ABCs from.*:DeprecationWarning",
    "ignore:.*IPython.utils.signatures backport for Python 2 is deprecated.*:DeprecationWarning",
    "ignore:.*Redefining class.*:UserWarning",
]

[tool.coverage.report]
omit = ['*/test*']

[tool.mypy]
python_version = "3.10"
plugins = "numpy.typing.mypy_plugin"
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "h5py.*",
    "IPython.*",
    "ipywidgets.*",
    "mpl_toolkits.*",
    "numcodecs.*",
    "numpy.*",
    "pandas.*",
    "pytest.*",
    "zarr.*",
]
ignore_missing_imports = true